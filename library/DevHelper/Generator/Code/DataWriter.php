<?php
class DevHelper_Generator_Code_DataWriter {
	public static function generate(array $addOn, DevHelper_Config_Base $config, array $dataClass) {
		$className = self::getClassName($addOn, $config, $dataClass);
		$tableName = DevHelper_Generator_Db::getTableName($config, $dataClass['name']);
		$tableFields = $dataClass['fields'];
		foreach ($tableFields as &$field) {
			unset($field['name']);
			if (!empty($field['length'])) {
				$field['maxLength'] = $field['length'];
				unset($field['length']);
			}
		}
		$tableFields = DevHelper_Generator_File::varExport($tableFields, 3);
		$primaryKey = DevHelper_Generator_File::varExport($dataClass['primaryKey']);
		$modelClassName = DevHelper_Generator_Code_Model::getClassName($addOn, $config, $dataClass);
		$commentAutoGeneratedStart = DevHelper_Generator_File::COMMENT_AUTO_GENERATED_START;
		$commentAutoGeneratedEnd = DevHelper_Generator_File::COMMENT_AUTO_GENERATED_END;
		
		$imageCode = self::generateImageCode($addOn, $config, $dataClass);
		
		$contents = <<<EOF
<?php
class $className extends XenForo_DataWriter {

	$commentAutoGeneratedStart
	
	protected function _getFields() {
		return array(
			'$tableName' => $tableFields
		);
	}

	protected function _getExistingData(\$data) {
		if (!\$id = \$this->_getExistingPrimaryKey(\$data, '{$dataClass['id_field']}')) {
			return false;
		}

		return array('$tableName' => \$this->_get{$dataClass['camelCase']}Model()->get{$dataClass['camelCase']}ById(\$id));
	}

	protected function _getUpdateCondition(\$tableName) {
		\$conditions = array();
		
		foreach ($primaryKey as \$field) {
			\$conditions[] = \$field . ' = ' . \$this->_db->quote(\$this->getExisting(\$field));
		}
		
		return implode(' AND ', \$conditions);
	}
	
	/**
	 * @return $modelClassName
	 */
	protected function _get{$dataClass['camelCase']}Model() {
		return \$this->getModelFromCache('$modelClassName');
	}
	
$imageCode
	
	$commentAutoGeneratedEnd
}
EOF;
		
		return array($className, $contents);
	}
	
	public static function getClassName(array $addOn, DevHelper_Config_Base $config, array $dataClass) {
		return DevHelper_Generator_File::getClassName($addOn['addon_id'], 'DataWriter_' . $dataClass['camelCase']);
	}
	
	protected static function generateImageCode(array $addOn, DevHelper_Config_Base $config, array $dataClass) {
		$imageField = DevHelper_Generator_Db::getImageField($dataClass['fields']);
		if ($imageField === false) {
			// no image field...
			return '';
		}
		
		$modelClassName = DevHelper_Generator_Code_Model::getClassName($addOn, $config, $dataClass);
		
		$contents = <<<EOF
	const IMAGE_PREPARED = 'imagePrepared';
	const IMAGE_SIZE_ORIGINAL = -1;
	
	public static \$imageQuality = 85;
	
	public function setImage(XenForo_Upload \$upload) {
		if (!\$upload->isValid()) {
			throw new XenForo_Exception(\$upload->getErrors(), true);
		}

		if (!\$upload->isImage()) {
			throw new XenForo_Exception(new XenForo_Phrase('uploaded_file_is_not_valid_image'), true);
		};

		\$imageType = \$upload->getImageInfoField('type');
		if (!in_array(\$imageType, array(IMAGETYPE_GIF, IMAGETYPE_JPEG, IMAGETYPE_PNG))) {
			throw new XenForo_Exception(new XenForo_Phrase('uploaded_file_is_not_valid_image'), true);
		}

		\$this->setExtraData(self::IMAGE_PREPARED, \$this->_prepareImage(\$upload));
		\$this->set('{$imageField}', XenForo_Application::\$time);
	}
	
	protected function _prepareImage(XenForo_Upload \$upload) {
		\$outputFiles = array();
		\$fileName = \$upload->getTempFile();
		\$imageType = \$upload->getImageInfoField('type');
		\$outputType = \$imageType;
		\$width = \$upload->getImageInfoField('width');
		\$height = \$upload->getImageInfoField('height');

		\$imageSizes = self::getImageSizes();
		reset(\$imageSizes);

		while (list(\$sizeCode, \$maxDimensions) = each(\$imageSizes)) {
			\$newTempFile = tempnam(XenForo_Helper_File::getTempDir(), 'xfa');
			
			if (\$maxDimensions == self::IMAGE_SIZE_ORIGINAL) {
				copy(\$fileName, \$newTempFile);
			} else {
				\$image = XenForo_Image_Abstract::createFromFile(\$fileName, \$imageType);
				if (!\$image) {
					continue;
				}
	
				\$image->thumbnail(\$maxDimensions, \$maxDimensions);
	
				\$image->output(\$outputType, \$newTempFile, self::\$imageQuality);
				unset(\$image);
			}

			\$outputFiles[\$sizeCode] = \$newTempFile;
		}

		if (count(\$outputFiles) != count(\$imageSizes)) {
			foreach (\$outputFiles AS \$tempFile) {
				if (\$tempFile != \$fileName) {
					@unlink(\$tempFile);
				}
			}
			
			throw new XenForo_Exception('Non-image passed in to _prepareImage');
		}
		
		return \$outputFiles;
	}
	
	protected function _moveImages(\$uploaded) {
		if (is_array(\$uploaded)) {
			\$data = \$this->getMergedData();
			foreach (\$uploaded as \$sizeCode => \$tempFile) {
				\$filePath = {$modelClassName}::getImageFilePath(\$data, \$sizeCode);
				\$directory = dirname(\$filePath);
 
				if (XenForo_Helper_File::createDirectory(\$directory, true) && is_writable(\$directory)) {
					if (file_exists(\$filePath)) {
						unlink(\$filePath);
					}
					
					\$success = @rename(\$tempFile, \$filePath);
					if (\$success) {
						XenForo_Helper_File::makeWritableByFtpUser(\$filePath);
					}
				}
			}
		}
	}
	
	protected function _postSave() {
		\$uploaded = \$this->getExtraData(self::IMAGE_PREPARED);
		if (\$uploaded) {
			\$this->_moveImages(\$uploaded);

			if (\$this->isUpdate()) {
				// removes old image
				\$existingData = \$this->getMergedExistingData();
				foreach (array_keys(\$this->getImageSizes()) as \$sizeCode) {
					\$filePath = {$modelClassName}::getImageFilePath(\$existingData, \$sizeCode);
					@unlink(\$filePath);
				}
			}
		}
	}
	
	protected function _postDelete() {
		\$existingData = \$this->getMergedExistingData();
		foreach (array_keys(\$this->getImageSizes()) as \$sizeCode) {
			\$filePath = {$modelClassName}::getImageFilePath(\$existingData, \$sizeCode);
			@unlink(\$filePath);
		}
	}
	
	public function getImageSizes() {
		return array(
			'x' => self::IMAGE_SIZE_ORIGINAL,
			'l' => 96,
			'm' => 48,
			's' => 24
		);
	}
EOF;
		
		return $contents;
	}
}